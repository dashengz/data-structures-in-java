Uni: dz2276
Name: Dasheng Zhang

Homework 6

-------------------------------------

Problem 1 (10 pts)

Use Kruskal's algorithm to find the minimum spanning tree on the following graph.
Show the forest maintained after each step.

A:

Edges are sorted based on weight.

(2,(A,C))
(2,(D,G))
(3,(D,E))
(5,(F,H))
(7,(C,F))
(7,(C,D))
(8,(F,G))
(8,(B,E))
(9,(C,G))
(10,(B,D))

T = {(2,(A,C))};
T = {(2,(A,C)),(2,(D,G))};
T = {(2,(A,C)),(2,(D,G)),(3,(D,E))};
T = {(2,(A,C)),(2,(D,G)),(3,(D,E)),(5,(F,H))};
T = {(2,(A,C)),(2,(D,G)),(3,(D,E)),(5,(F,H)),(7,(C,F))};
T = {(2,(A,C)),(2,(D,G)),(3,(D,E)),(5,(F,H)),(7,(C,F)),(7,(C,D))};
(8,(F,G)) forms a cycle
(9,(C,G)) forms a cycle
T = {(2,(A,C)),(2,(D,G)),(3,(D,E)),(5,(F,H)),(7,(C,F)),(7,(C,D)),(8,(B,E))};
(10,(B,D)) forms a cycle

The final forest (MST) is:

T = {(2,(A,C)),(2,(D,G)),(3,(D,E)),(5,(F,H)),(7,(C,F)),(7,(C,D)),(8,(B,E))};

-------------------------------------

Problem 2 (10 pts)

Provide an example directed graph G in which Dijkstra's algorithm will produce the wrong result
because G contains a negative weight edge (but no negative cost cycle).

Show a run of Dijkstra's algorithm that provides the wrong result (i.e. doesn't find the correct shortest path cost for a
node).

A:

Consider this graph:

A: (D,10),(B,2),(C,1)
B: (C,3)
C:
D: (B,-30)

If we use Dijkstra's algorithm and start with vertex A:

('->' annotates cost)

Start with A:
    A -> 0, B,C,D -> infinity;
Explore A:
    C -> 1, B -> 2, D -> 10;
Explore C next:
    Nothing changes;
Explore B next:
    C's cost is not updated, because 2+3=5>1,
    so Edge(B,C) is considered as processed;
Explore D next:
    B -> -20, and the algorithm finishes,
    since Edge(B,C) is already processed.

So using Dijkstra's algorithm, the shortest path cost from vertex A to C is 1.
But actually if we go from A to D to B to C, the cost is only (10-30+3=) -17.

Therefore, if graph G contains a negative weight edge, Dijkstra's algorithm could provide wrong results.

-------------------------------------

Problem 3 (10 pts)

A bipartite graph G= (V; E) is a graph whose vertices V can be partitioned into two disjoint sets V₁ and V₂,
such that every edge connects a vertex in V₁ to one in V₂.

For every edge (u,v) either u ∈ V₁ and v ∈ V₂, or u ∈ V₂ and v ∈ V₁.

For example, the following graph is bipartite with  V₁={A,B,C,D} and V₂={E,F,G}.

Describe an algorithm (in pseudocode or in your own words) that detects if a graph is bipartite.

Your algorithm should run in O(|V|+|E|).

Hint: Try to modify breadth first search.

A:

Like BFS, use queue to hold the vertices, but have two sets that stores each partitions.

Pueudocode:

enqueue s
add s to group1 set
while the queue is not empty:
    u <- dequeue()
        for each vertex v that is adjacent to u:
            if v is in group1:
                break (This graph is not a bipartite graph)
            add v to group2 set
            enqueue(v)

It's basically the same as BFS, so it should run in O(|V|+|E|).
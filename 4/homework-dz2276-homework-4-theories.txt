Uni: dz2276
Name: Dasheng Zhang

Homework 4

-------------------------------------

Problem 1:

Consider the following array of integers: a = [3, 9, 7, 8, 2, 5, 1]

a) Show the result of inserting the integers in a one by one into an initially empty min-heap.
Then show the result of calling deleteMin on the heap 3 times. After each insertion and
deleteMin step, show the array and the tree structure it represents.

A:

Inserting...

	3
[3]

	3
  /
9
[3, 9]

	3
  /	  \
9		7
[3, 9, 7]

		3
	  /	  \
	8		7
  /
9
[3, 8, 7, 9]

		2
	  /	  \
	3		7
  /	  \
9		8
[2, 3, 7, 9, 8]

		2
	  /	  \
	3		5
  /	  \	   /
9	   8  7
[2, 3, 5, 8, 6, 7]

		1
	  /	  \
	3		2
  /	  \	   /  \
9	   8  7	   5
[1, 3, 2, 9, 8, 7, 5]

deleteMin...

		2
	  /	  \
	3		5
  /	  \	   /
9	   8  7
[2, 3, 5, 8, 6, 7]

		3
	  /	  \
	7		5
  /	  \
9		8
[3, 7, 5, 9, 8]

		5
	  /	  \
	7		8
  /
9
[5, 7, 8, 9]

b) Sort the array using in-place using Heap Sort. First show the result of turning a into a
max heap using the linear time algorithm to build a heap (submit only the final array). Then
show the array after each deleteMax step. The last step should be an array sorted in
increasing order.

A: turn into a max heap in O(N): [9, 8, 7, 3, 2, 5, 1]

deleteMax...

		8
	  /	  \
	3		7
  /	  \	   /
1	   2  5
[8, 3, 7, 1, 2, 5, | 9]

		7
	  /	  \
	3		5
  /	  \
1		2
[7, 3, 5, 1, 2 ,| 8, 9]

		5
	  /	  \
	3		2
  /
1
[5, 3, 2, 1 ,| 7, 8, 9]

	3
  /	  \
1		2
[3, 1, 2,| 5, 7, 8, 9]

	2
  /
1
[2, 1,| 3, 5, 7, 8, 9]

1
[1,| 2, 3, 5, 7, 8, 9]

[1, 2, 3, 5, 7, 8, 9]

-------------------------------------

Problem 2:

We discsused that a complete binary tree of N elements uses array positions 1 to N.
Suppose we try to use an array representation of a binary tree that is not
complete. We use the same layout for the array as for a complete tree, but only
store entries for nodes that are actually in the binary tree, leaving the other
entries set to null.

Give a big-O bound for the space required to store each of the following trees:

a) A complete binary tree with N nodes that, in addition, has two extra levels (
that is, it is very slightly unbalanced).

A: 	Example scenario:
			o
		  /	  \
		 o     o
	    / \   / \
	   o   o o   o
	  /
	 o
	/
   o

Taking up 2^(⌈logN⌉ + 1) = O(2^logN) of space.

b) a binary tree that has a deepest node at depth 2 log N.

A: Taking up 2^(2logN + 1) = 2^(log(N^2) + 1) = 2N^2 = O(N^2) of space.

c) a binary tree that has a deepest node at depth 4.1 log N.

A: Taking up 2^(4.1logN + 1) = 2^(log(N^4.1) + 1) = 2N^4.1 = O(N^4.1) of space.

d) the worst case binary tree.

A: N elements in a worst binary tree means that it has N levels, which are 2^N - 1 Nodes. So the array takes up 2^N = O(2^N) of space.

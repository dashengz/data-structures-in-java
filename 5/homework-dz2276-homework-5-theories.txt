Uni: dz2276
Name: Dasheng Zhang

Homework 5

-------------------------------------

Problem 1: Sorting (15 pts)

[314, 512, 004, 999, 023, 042, 613, 109, 001, 123, 666]

Sort the following array of (base-10) integers using:

* (a) Insertion Sort (for each entry that needs to be moved, show the array after it
has been moved to its final position). 

A:

[004, 314, 512, 999, 023, 042, 613, 109, 001, 123, 666] (Original)
[004, 023, 314, 512, 999, 042, 613, 109, 001, 123, 666]
[004, 023, 042, 314, 512, 999, 613, 109, 001, 123, 666]
[004, 023, 042, 314, 512, 613, 999, 109, 001, 123, 666]
[004, 023, 042, 109, 314, 512, 613, 999, 001, 123, 666]
[001, 004, 023, 042, 109, 314, 512, 613, 999, 123, 666]
[001, 004, 023, 042, 109, 123, 314, 512, 613, 999, 666]
[001, 004, 023, 042, 109, 123, 314, 512, 613, 666, 999] (Result)

* (b) Quick Sort with median of three pivot (show the pivot in each step and the
subarray after partitioning according to the pivot). You do not have to do an in-place
sort, i.e. you don't have to use swaps to partition the array. 

A:

               [314, 512, 004, 999, 023, 042, 613, 109, 001, 123, 666] (Original)

         [004, 023, 042, 109, 001, 123]       [314]      [512, 999, 613, 666]

    [004, 023, 001]     [042]   [109, 123]    [314]    [512, 613]  [666]  [999]

[001]   [004]    [023]  [042]  [109]  [123]   [314]   [512]  [613] [666]   [999]

               [001, 004, 023, 042, 109, 123, 314, 512, 613, 666, 999] (Result)

* (c) Radix Sort.

A:

[314, 512, 004, 999, 023, 042, 613, 109, 001, 123, 666] (Original)

0
1 001
2 512 042
3 023 613 123
4 314 004
5
6 666
7
8
9 999 109

[001, 512, 042, 023, 613, 123, 314, 004, 666, 999, 109]

0 001 004 109
1 512 613 314
2 023 123
3
4 042
5
6 666
7
8
9 999

[001, 004, 109, 512, 613, 314, 023, 123, 042, 666, 999]

0 001 004 023 042
1 109 123
2
3 314
4
5 512
6 613 666
7
8
9 999

[001, 004, 023, 042, 109, 123, 314, 512, 613, 666, 999] (Result)

-------------------------------------

Problem 2: Sorting Stability (10 pts)

* (a) Some sorting algorithms are not stable. Suggest a way to make any sorting algorithm
stable by adding extra information to the keys.

A:

Quick Sort is not stable.

We can add an additional key to each element, storing their initial position in the array, when iterating through the array the first time.
And when comparing each element with the pivot, we first compare if the element is equal to the pivot,
if it is, then compare the additional keys, see if the key is less than the pivot's key.

This way, elements with equal value will not fail the 'less than' check.
The element that's input earlier will remain in the lower-value partition.

Thus the sorting would no longer mess up the order, and become stable.

* (b) Demonstrate, by providing a small example, that Quick Sort is not stable.

A: Example: [2, 30, 4a, 5, 27, 3, 4b]
(4a = 4b, the 'a' and 'b' are here to distinguish the two 4s)

- 2 as Pivot:
[2][30, 4a, 5, 27, 3, 4b]
- 30 as Pivot:
(4a, 5, 27, 3, 4b are all less than 30, so swap 4b with 30)
[2][4b, 4a, 5, 27, 3][30]
- 4b as Pivot:
(4a is not less than 4b so quicksort thinks that 4a should be in the higher-value partition)
[2][3][4b][5, 27, 4a][30]
...
We can see that 4b is now ahead of 4a, which is not the original input order.
Thus, Quick Sort is not stable.

-------------------------------------

Problem 3: Parallel MergeSort (15 pts)

In Merge Sort and Quick Sort, the individual recursive calls for each of the two
partitions left and right of a subarray are independent of each other. You could
therefore, in theory, run both recursive calls in parallel, for instance on a multicore
CPU.

Assuming left has N₁ elements and right has N₂ elements, the time needed to recursively
sort both partitions is only max(T(N₁),T(N₂)).

Now, assume you have a machine with an infinite number of cores, so you can run as many
method calls in parallel as you want.

What is the total running time to sort an array of length N using Merge Sort in this
scenario? Provide a tight big-O bound and justify your answer.

A:

In the scenario described above, the merge sort will take 2logN steps, because merge sort splits the array into half
everytime and then needs to merge them back together again. Example below:
        o
      /   \
     o     o
    / \   / \
   o   o o   o
    \ /   \ /
     o     o
      \   /
        o
 (2log4 = 4 steps)

So the time T = 2 (N/2^0 + N/2^1 + N/2^2 + ... + N/2^k)
              = 2N(1/2^0 + 1/2^1 + 1/2^2 + ... + 1/2^k)  [geometric series]
              = 2N * 2 = 4N = O(N)

-------------------------------------

Problem 7: Extra Credit (Theory, 10pts)

For a fixed sequence of N integers, you can use a heap to find the median in O(N log N)
time.

Assume that, instead of a fixed sequence of integers, you have a stream (implemented as
an iterator, as described in in problem 4). Instead of the k-largest integers, you want
to to keep track of the median of the integers in the stream seen so far (not the
mean!).

Describe a way to keep track of the median in the stream, so that you can return the
current median at any time in O(1). When we encounter a new number in the stream,
updating the median should only take O(log N) time, where N is the number of integers
seen in the stream so far, including the latest one.

Hint: Use more than one heap.

A: 

